name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:  # Allow manual triggering

env:
  # Dummy values for CI build
  NEXT_PUBLIC_APPWRITE_ENDPOINT: 'https://cloud.appwrite.io/v1'
  NEXT_PUBLIC_APPWRITE_PROJECT_ID: 'ci-test-project'
  NEXT_PUBLIC_APPWRITE_DATABASE_ID: 'ci-test-database'
  NEXT_APPWRITE_KEY: 'ci-test-key'

jobs:
  # Job 1: Code Quality & Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint with annotations
        run: npm run lint
        continue-on-error: true

      - name: Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Dependency tree analysis
        run: |
          echo "=== Analyzing dependency tree ==="
          npm ls --depth=0 || true

  # Job 2: Type Checking
  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npx tsc --noEmit --pretty

  # Job 3: Build & Test Matrix
  build-test:
    name: Build & Test (Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        node-version: ['20.x', '22.x']
        os: [ubuntu-latest]
        # Optionally test on multiple OS
        # os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_APPWRITE_ENDPOINT: ${{ env.NEXT_PUBLIC_APPWRITE_ENDPOINT }}
          NEXT_PUBLIC_APPWRITE_PROJECT_ID: ${{ env.NEXT_PUBLIC_APPWRITE_PROJECT_ID }}
          NEXT_PUBLIC_APPWRITE_DATABASE_ID: ${{ env.NEXT_PUBLIC_APPWRITE_DATABASE_ID }}
          NEXT_APPWRITE_KEY: ${{ env.NEXT_APPWRITE_KEY }}

      - name: Check build output
        run: |
          echo "=== Build completed successfully ==="
          ls -lah .next/
          du -sh .next/

      # TODO: Add when tests are created
      # - name: Run tests
      #   run: npm test
      #
      # - name: Generate coverage report
      #   run: npm run test:coverage
      #
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     files: ./coverage/lcov.info

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '20.x' && matrix.os == 'ubuntu-latest'
        with:
          name: build-artifacts
          path: |
            .next/
            public/
          retention-days: 7

  # Job 4: Bundle Analysis
  analyze-bundle:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    needs: [build-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for analysis
        run: npm run build
        env:
          NEXT_PUBLIC_APPWRITE_ENDPOINT: ${{ env.NEXT_PUBLIC_APPWRITE_ENDPOINT }}
          NEXT_PUBLIC_APPWRITE_PROJECT_ID: ${{ env.NEXT_PUBLIC_APPWRITE_PROJECT_ID }}
          NEXT_PUBLIC_APPWRITE_DATABASE_ID: ${{ env.NEXT_PUBLIC_APPWRITE_DATABASE_ID }}
          NEXT_APPWRITE_KEY: ${{ env.NEXT_APPWRITE_KEY }}

      - name: Analyze bundle size
        run: |
          echo "=== Build Size Analysis ==="
          du -sh .next/static/
          du -sh .next/static/chunks/
          echo "\n=== Largest files ==="
          find .next/static -type f -exec du -h {} + | sort -rh | head -20

  # Job 5: Final Status Check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [code-quality, type-check, build-test, analyze-bundle]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.code-quality.result }}" != "success" ] || 
             [ "${{ needs.type-check.result }}" != "success" ] || 
             [ "${{ needs.build-test.result }}" != "success" ] || 
             [ "${{ needs.analyze-bundle.result }}" != "success" ]; then
            echo "❌ One or more CI jobs failed"
            exit 1
          else
            echo "✅ All CI jobs passed successfully!"
          fi
